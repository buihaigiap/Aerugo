# Multi-stage build for Aerugo Registry
FROM rustlang/rust:nightly as builder

# Install build dependencies including Node.js
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Accept DATABASE_URL as build argument
ARG DATABASE_URL

# Copy build files
COPY Cargo.toml Cargo.lock ./
COPY src ./src
COPY migrations ./migrations
COPY .env ./.env

# Copy and build frontend for production
COPY app/Fe-AI-Decenter ./app/Fe-AI-Decenter
RUN cd app/Fe-AI-Decenter && \
    npm install && \
    npm run build

# Build the application
# Use local DATABASE_URL for build, will be overridden at runtime
# Install PostgreSQL for build-time database
RUN apt-get update && apt-get install -y postgresql postgresql-contrib && \
    service postgresql start && \
    su - postgres -c "createuser --superuser aerugo" && \
    su - postgres -c "createdb aerugo_dev" && \
    su - postgres -c "psql -c \"ALTER USER aerugo PASSWORD 'development';\""

# Check PostgreSQL status and run migrations before building
RUN echo "Setting up database for SQLX macros" && \
    service postgresql start && \
    sleep 10 && \
    su - postgres -c "psql -c \"\\l\"" && \
    su - postgres -c "psql -c \"SELECT version();\"" && \
    export DATABASE_URL="postgresql://aerugo:development@localhost:5432/aerugo_dev" && \
    cargo install sqlx-cli --no-default-features --features native-tls,postgres && \
    sqlx migrate run && \
    cargo build --release --bin aerugo --verbose

# Runtime stage - use same base as builder for Node.js compatibility
FROM rustlang/rust:nightly

# Install runtime dependencies including Node.js
RUN apt-get update && \
    apt-get install -y ca-certificates curl \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary
COPY --from=builder /app/target/release/aerugo /usr/local/bin/aerugo

# Copy migrations
COPY --from=builder /app/migrations ./migrations

# Copy environment file
COPY --from=builder /app/.env ./.env

# Copy frontend built files (static dist)
COPY --from=builder /app/app/Fe-AI-Decenter/dist ./app/Fe-AI-Decenter/dist

# Copy startup script
COPY start.sh ./start.sh
RUN chmod +x ./start.sh

# Create non-root user for security
RUN useradd -r -s /bin/false -m aerugo

# Set up working directory
RUN mkdir -p /app && chown aerugo:aerugo /app
WORKDIR /app

# Change ownership to app user
RUN chown -R aerugo:aerugo /app /usr/local/bin/aerugo

USER aerugo
# Expose only port 8080 (frontend + backend on same port)
EXPOSE 8080

# Set default environment variables
ENV LISTEN_ADDRESS="0.0.0.0:8080"
ENV LOG_LEVEL="info"
ENV S3_ENDPOINT="http://host.docker.internal:9001"
ENV S3_BUCKET="aerugo-registry"
ENV S3_ACCESS_KEY="minioadmin"
ENV S3_SECRET_KEY="minioadmin"
ENV S3_REGION="us-east-1"
ENV REDIS_URL="redis://host.docker.internal:6380"
ENV JWT_SECRET="test-integration-secret-key-do-not-use-in-production"
ENV API_PREFIX="/api/v1"
ENV S3_USE_PATH_STYLE="true"
ENV DATABASE_REQUIRE_SSL="false"
ENV DATABASE_MIN_CONNECTIONS="5"
ENV DATABASE_MAX_CONNECTIONS="20"
ENV REDIS_POOL_SIZE="10"
ENV REDIS_TTL_SECONDS="3600"
ENV JWT_EXPIRATION_SECONDS="3600"
ENV REFRESH_TOKEN_EXPIRATION_SECONDS="604800"

# Note: DATABASE_URL should be provided when running the container
# Example: docker run -e DATABASE_URL="your_database_url" aerugo:latest

# Health check - use simpler check to avoid auth issues
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/docs || exit 1

CMD ["/start.sh"]
